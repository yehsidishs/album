{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glassMorph: {\n          '0%': { opacity: '0', transform: 'translateY(20px) scale(0.95)' },\n          '100%': { opacity: '1', transform: 'translateY(0) scale(1)' },\n        },\n        pulseSoft: {\n          '0%, 100%': { opacity: '0.6', transform: 'scale(1)' },\n          '50%': { opacity: '1', transform: 'scale(1.05)' },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' },\n        },\n        shimmer: {\n          '0%': { left: '-100%' },\n          '100%': { left: '100%' },\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"glass-morph\": \"glassMorph 0.6s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"pulse-soft\": \"pulseSoft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"shimmer\": \"shimmer 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3583},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertMemorySchema, insertChatMessageSchema, insertCounterSchema, insertWishlistSchema, insertMemoryCommentSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { z } from \"zod\";\n\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID || process.env.VITE_GOOGLE_CLIENT_ID;\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET || process.env.VITE_GOOGLE_CLIENT_SECRET;\nconst SESSION_SECRET = process.env.SESSION_SECRET || (process.env.NODE_ENV === \"development\" ? \"dev-secret-key-change-in-production\" : undefined);\n\nif (!SESSION_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable must be set\");\n}\n\n// Google OAuth is optional - only set up if credentials are provided\nconst GOOGLE_OAUTH_ENABLED = !!(GOOGLE_CLIENT_ID && GOOGLE_CLIENT_SECRET);\n\nconst loginSchema = z.object({\n  emailOrUsername: z.string().min(1),\n  password: z.string().min(1),\n});\n\nconst baseRegisterSchema = z.object({\n  email: z.string().email(),\n  username: z.string().min(1),\n  password: z.string().min(1),\n  confirmPassword: z.string(),\n  googleId: z.string().optional(),\n  role: z.string().default(\"guest\"),\n  avatar: z.string().optional(),\n  status: z.string().optional(),\n  isOnline: z.boolean().optional(),\n  lastSeen: z.date().optional(),\n  accountId: z.string().optional(),\n});\n\nconst registerSchema = baseRegisterSchema.refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst invitationLoginSchema = z.object({\n  emailOrUsername: z.string().min(1),\n  password: z.string().min(1),\n  invitationCode: z.string().min(1),\n});\n\nconst invitationRegisterSchema = baseRegisterSchema.extend({\n  invitationCode: z.string().min(1),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(session({\n    secret: SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // 24 hours\n  }));\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Passport configuration - only setup Google OAuth if credentials are available\n  if (GOOGLE_OAUTH_ENABLED) {\n    passport.use(new GoogleStrategy({\n      clientID: GOOGLE_CLIENT_ID!,\n      clientSecret: GOOGLE_CLIENT_SECRET!,\n      callbackURL: \"/api/auth/google/callback\"\n    }, async (accessToken, refreshToken, profile, done) => {\n      try {\n        let user = await storage.getUserByGoogleId(profile.id);\n        \n        if (!user) {\n          // Create new user\n          const account = await storage.createAccount({\n            name: `${profile.displayName}'s Account`\n          });\n\n          user = await storage.createUser({\n            email: profile.emails![0].value,\n            username: profile.displayName || `user_${Date.now()}`,\n            googleId: profile.id,\n            role: \"main_admin\",\n            accountId: account.id,\n            avatar: profile.photos?.[0]?.value,\n          });\n\n          await storage.generateInvitationCode(account.id, user.id);\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }));\n  }\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { emailOrUsername, password } = loginSchema.parse(req.body);\n      \n      let user = await storage.getUserByEmail(emailOrUsername);\n      if (!user) {\n        user = await storage.getUserByUsername(emailOrUsername);\n      }\n\n      if (!user || !user.password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.login(user, (err) => {\n        if (err) return res.status(500).json({ message: \"Login error\" });\n        res.json({ user });\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, username, password } = registerSchema.parse(req.body);\n\n      const existingUser = await storage.getUserByEmail(email) || await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      const account = await storage.createAccount({\n        name: `${username}'s Account`\n      });\n\n      const user = await storage.createUser({\n        email,\n        username,\n        password: hashedPassword,\n        role: \"main_admin\",\n        accountId: account.id,\n      });\n\n      await storage.generateInvitationCode(account.id, user.id);\n\n      req.login(user, (err) => {\n        if (err) return res.status(500).json({ message: \"Login error\" });\n        res.json({ user });\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/invitation-login\", async (req, res) => {\n    try {\n      const { emailOrUsername, password, invitationCode } = invitationLoginSchema.parse(req.body);\n\n      const invitation = await storage.getInvitationByCode(invitationCode);\n      if (!invitation || invitation.isUsed) {\n        return res.status(400).json({ message: \"Invalid invitation code\" });\n      }\n\n      let user = await storage.getUserByEmail(emailOrUsername);\n      if (!user) {\n        user = await storage.getUserByUsername(emailOrUsername);\n      }\n\n      if (!user || !user.password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      await storage.updateUser(user.id, { \n        accountId: invitation.accountId,\n        role: \"co_admin\"\n      });\n      await storage.useInvitation(invitationCode, user.id);\n\n      req.login(user, (err) => {\n        if (err) return res.status(500).json({ message: \"Login error\" });\n        res.json({ user });\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/invitation-register\", async (req, res) => {\n    try {\n      const { email, username, password, invitationCode } = invitationRegisterSchema.parse(req.body);\n\n      const invitation = await storage.getInvitationByCode(invitationCode);\n      if (!invitation || invitation.isUsed) {\n        return res.status(400).json({ message: \"Invalid invitation code\" });\n      }\n\n      const existingUser = await storage.getUserByEmail(email) || await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      const user = await storage.createUser({\n        email,\n        username,\n        password: hashedPassword,\n        role: \"co_admin\",\n        accountId: invitation.accountId,\n      });\n\n      await storage.useInvitation(invitationCode, user.id);\n\n      req.login(user, (err) => {\n        if (err) return res.status(500).json({ message: \"Login error\" });\n        res.json({ user });\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"]\n  }));\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n    (req, res) => {\n      res.redirect(\"/dashboard\");\n    }\n  );\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) return res.status(500).json({ message: \"Logout error\" });\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json({ user: req.user });\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (req.isAuthenticated()) {\n      next();\n    } else {\n      res.status(401).json({ message: \"Authentication required\" });\n    }\n  };\n\n  // Memory routes\n  app.get(\"/api/memories\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const { limit = 20, offset = 0 } = req.query;\n      \n      const memories = await storage.getMemories(\n        user.accountId, \n        user.id, \n        parseInt(limit), \n        parseInt(offset)\n      );\n      \n      res.json(memories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch memories\" });\n    }\n  });\n\n  app.post(\"/api/memories\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const memoryData = insertMemorySchema.parse({\n        ...req.body,\n        authorId: user.id,\n        accountId: user.accountId,\n      });\n\n      const memory = await storage.createMemory(memoryData);\n      res.json(memory);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid memory data\" });\n    }\n  });\n\n  app.get(\"/api/memories/search\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const { q } = req.query;\n      \n      if (!q) {\n        return res.status(400).json({ message: \"Query parameter required\" });\n      }\n\n      const memories = await storage.searchMemories(user.accountId, q);\n      res.json(memories);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Comment routes\n  app.get(\"/api/memories/:id/comments\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const comments = await storage.getMemoryComments(id);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/memories/:id/comments\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const { id } = req.params;\n      \n      const commentData = insertMemoryCommentSchema.parse({\n        ...req.body,\n        memoryId: id,\n        authorId: user.id,\n      });\n\n      const comment = await storage.createComment(commentData);\n      res.json(comment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid comment data\" });\n    }\n  });\n\n  // Chat routes\n  app.get(\"/api/chat/room\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const room = await storage.getChatRoom(user.accountId);\n      res.json(room);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chat room\" });\n    }\n  });\n\n  app.get(\"/api/chat/messages\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const { limit = 50, offset = 0 } = req.query;\n      \n      const room = await storage.getChatRoom(user.accountId);\n      if (!room) {\n        return res.status(404).json({ message: \"Chat room not found\" });\n      }\n\n      const messages = await storage.getChatMessages(room.id, parseInt(limit), parseInt(offset));\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Counter routes\n  app.get(\"/api/counters\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const counters = await storage.getCounters(user.accountId);\n      res.json(counters);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch counters\" });\n    }\n  });\n\n  app.post(\"/api/counters\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const counterData = insertCounterSchema.parse({\n        ...req.body,\n        accountId: user.accountId,\n      });\n\n      const counter = await storage.createCounter(counterData);\n      res.json(counter);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid counter data\" });\n    }\n  });\n\n  // Wishlist routes\n  app.get(\"/api/wishlist\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const wishlist = await storage.getWishlist(user.id);\n      res.json(wishlist);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const itemData = insertWishlistSchema.parse({\n        ...req.body,\n        userId: user.id,\n      });\n\n      const item = await storage.createWishlistItem(itemData);\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid wishlist item data\" });\n    }\n  });\n\n  // Account routes\n  app.get(\"/api/account/invitation-code\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      if (user.role !== \"main_admin\") {\n        return res.status(403).json({ message: \"Only main admin can access invitation codes\" });\n      }\n\n      const account = await storage.getAccount(user.accountId);\n      if (!account?.invitationCode) {\n        const newCode = await storage.generateInvitationCode(user.accountId, user.id);\n        return res.json({ code: newCode });\n      }\n\n      res.json({ code: account.invitationCode });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invitation code\" });\n    }\n  });\n\n  app.post(\"/api/account/generate-invitation\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      if (user.role !== \"main_admin\") {\n        return res.status(403).json({ message: \"Only main admin can generate invitation codes\" });\n      }\n\n      const code = await storage.generateInvitationCode(user.accountId, user.id);\n      res.json({ code });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate invitation code\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time features\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    let userId: string | null = null;\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth') {\n          userId = message.userId;\n          clients.set(userId, ws);\n          await storage.updateUser(userId, { isOnline: true });\n        }\n\n        if (message.type === 'chat_message' && userId) {\n          const user = await storage.getUser(userId);\n          if (!user) return;\n\n          const room = await storage.getChatRoom(user.accountId);\n          if (!room) return;\n\n          const chatMessage = await storage.createChatMessage({\n            roomId: room.id,\n            authorId: userId,\n            content: message.content,\n            type: message.messageType || 'text',\n            isEphemeral: message.isEphemeral || false,\n            expiresAt: message.isEphemeral ? new Date(Date.now() + (message.messageType === 'ephemeral_video' ? 2 * 60 * 1000 : 2 * 60 * 1000)) : undefined,\n          });\n\n          // Send to all users in the same account\n          const accountUsers = await storage.getUsersByAccountId(user.accountId);\n          accountUsers.forEach(accountUser => {\n            const client = clients.get(accountUser.id);\n            if (client && client.readyState === WebSocket.OPEN) {\n              client.send(JSON.stringify({\n                type: 'new_message',\n                message: chatMessage\n              }));\n            }\n          });\n        }\n\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', async () => {\n      if (userId) {\n        clients.delete(userId);\n        await storage.updateUser(userId, { \n          isOnline: false, \n          lastSeen: new Date() \n        });\n      }\n    });\n  });\n\n  // Clean up expired messages every minute\n  setInterval(async () => {\n    try {\n      await storage.deleteExpiredMessages();\n    } catch (error) {\n      console.error('Failed to clean up expired messages:', error);\n    }\n  }, 60000);\n\n  return httpServer;\n}\n","size_bytes":17105},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport {\n  users, accounts, memories, memoryComments, chatRooms, chatMessages,\n  counters, wishlists, invitations, games,\n  type User, type InsertUser, type Account, type InsertAccount,\n  type Memory, type InsertMemory, type MemoryComment, type InsertMemoryComment,\n  type ChatRoom, type InsertChatRoom, type ChatMessage, type InsertChatMessage,\n  type Counter, type InsertCounter, type Wishlist, type InsertWishlist,\n  type Invitation, type InsertInvitation, type Game, type InsertGame\n} from \"@shared/schema\";\nimport { eq, desc, and, or, ilike, gte, lte, isNull } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set\");\n}\n\nconst client = postgres(process.env.DATABASE_URL);\nconst db = drizzle(client);\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  getUsersByAccountId(accountId: string): Promise<User[]>;\n\n  // Account management\n  getAccount(id: string): Promise<Account | undefined>;\n  createAccount(account: InsertAccount): Promise<Account>;\n  updateAccount(id: string, updates: Partial<InsertAccount>): Promise<Account>;\n  generateInvitationCode(accountId: string, createdById: string): Promise<string>;\n  getInvitationByCode(code: string): Promise<Invitation | undefined>;\n  useInvitation(code: string, userId: string): Promise<void>;\n\n  // Memory management\n  getMemories(accountId: string, userId?: string, limit?: number, offset?: number): Promise<Memory[]>;\n  getMemory(id: string): Promise<Memory | undefined>;\n  createMemory(memory: InsertMemory): Promise<Memory>;\n  updateMemory(id: string, updates: Partial<InsertMemory>): Promise<Memory>;\n  deleteMemory(id: string): Promise<void>;\n  searchMemories(accountId: string, query: string): Promise<Memory[]>;\n\n  // Comments\n  getMemoryComments(memoryId: string): Promise<MemoryComment[]>;\n  createComment(comment: InsertMemoryComment): Promise<MemoryComment>;\n  deleteComment(id: string): Promise<void>;\n\n  // Chat management\n  getChatRoom(accountId: string): Promise<ChatRoom | undefined>;\n  createChatRoom(chatRoom: InsertChatRoom): Promise<ChatRoom>;\n  updateChatRoom(id: string, updates: Partial<InsertChatRoom>): Promise<ChatRoom>;\n  getChatMessages(roomId: string, limit?: number, offset?: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  deleteExpiredMessages(): Promise<void>;\n\n  // Counters\n  getCounters(accountId: string): Promise<Counter[]>;\n  createCounter(counter: InsertCounter): Promise<Counter>;\n  updateCounter(id: string, updates: Partial<InsertCounter>): Promise<Counter>;\n  deleteCounter(id: string): Promise<void>;\n\n  // Wishlist\n  getWishlist(userId: string): Promise<Wishlist[]>;\n  createWishlistItem(item: InsertWishlist): Promise<Wishlist>;\n  updateWishlistItem(id: string, updates: Partial<InsertWishlist>): Promise<Wishlist>;\n  deleteWishlistItem(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.googleId, googleId));\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async getUsersByAccountId(accountId: string): Promise<User[]> {\n    return db.select().from(users).where(eq(users.accountId, accountId));\n  }\n\n  async getAccount(id: string): Promise<Account | undefined> {\n    const result = await db.select().from(accounts).where(eq(accounts.id, id));\n    return result[0];\n  }\n\n  async createAccount(account: InsertAccount): Promise<Account> {\n    const result = await db.insert(accounts).values(account).returning();\n    return result[0];\n  }\n\n  async updateAccount(id: string, updates: Partial<InsertAccount>): Promise<Account> {\n    const result = await db.update(accounts).set(updates).where(eq(accounts.id, id)).returning();\n    return result[0];\n  }\n\n  async generateInvitationCode(accountId: string, createdById: string): Promise<string> {\n    const code = `${Math.random().toString(36).substr(2, 4).toUpperCase()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    \n    await db.insert(invitations).values({\n      code,\n      accountId,\n      createdById,\n    });\n\n    await db.update(accounts).set({ invitationCode: code }).where(eq(accounts.id, accountId));\n\n    return code;\n  }\n\n  async getInvitationByCode(code: string): Promise<Invitation | undefined> {\n    const result = await db.select().from(invitations).where(eq(invitations.code, code));\n    return result[0];\n  }\n\n  async useInvitation(code: string, userId: string): Promise<void> {\n    await db.update(invitations)\n      .set({ isUsed: true, usedById: userId, usedAt: new Date() })\n      .where(eq(invitations.code, code));\n  }\n\n  async getMemories(accountId: string, userId?: string, limit = 20, offset = 0): Promise<Memory[]> {\n    let conditions = [eq(memories.accountId, accountId)];\n    \n    if (userId) {\n      // Filter based on visibility and user permissions\n      const user = await this.getUser(userId);\n      if (user?.role === 'guest') {\n        conditions.push(\n          or(\n            eq(memories.visibility, 'all'),\n            and(\n              eq(memories.visibility, 'specific_guests'),\n              // Note: Array field searching would need proper array operators in production\n            )\n          )\n        );\n      }\n    }\n\n    return db.select().from(memories)\n      .where(and(...conditions))\n      .orderBy(desc(memories.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getMemory(id: string): Promise<Memory | undefined> {\n    const result = await db.select().from(memories).where(eq(memories.id, id));\n    return result[0];\n  }\n\n  async createMemory(memory: InsertMemory): Promise<Memory> {\n    const result = await db.insert(memories).values(memory).returning();\n    return result[0];\n  }\n\n  async updateMemory(id: string, updates: Partial<InsertMemory>): Promise<Memory> {\n    const result = await db.update(memories).set(updates).where(eq(memories.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteMemory(id: string): Promise<void> {\n    await db.delete(memories).where(eq(memories.id, id));\n  }\n\n  async searchMemories(accountId: string, query: string): Promise<Memory[]> {\n    return db.select().from(memories)\n      .where(\n        and(\n          eq(memories.accountId, accountId),\n          or(\n            ilike(memories.description, `%${query}%`),\n            // Note: Array field searching would need proper array operators in production\n          )\n        )\n      )\n      .orderBy(desc(memories.createdAt));\n  }\n\n  async getMemoryComments(memoryId: string): Promise<MemoryComment[]> {\n    return db.select().from(memoryComments)\n      .where(eq(memoryComments.memoryId, memoryId))\n      .orderBy(desc(memoryComments.createdAt));\n  }\n\n  async createComment(comment: InsertMemoryComment): Promise<MemoryComment> {\n    const result = await db.insert(memoryComments).values(comment).returning();\n    return result[0];\n  }\n\n  async deleteComment(id: string): Promise<void> {\n    await db.delete(memoryComments).where(eq(memoryComments.id, id));\n  }\n\n  async getChatRoom(accountId: string): Promise<ChatRoom | undefined> {\n    const result = await db.select().from(chatRooms).where(eq(chatRooms.accountId, accountId));\n    return result[0];\n  }\n\n  async createChatRoom(chatRoom: InsertChatRoom): Promise<ChatRoom> {\n    const result = await db.insert(chatRooms).values(chatRoom).returning();\n    return result[0];\n  }\n\n  async updateChatRoom(id: string, updates: Partial<InsertChatRoom>): Promise<ChatRoom> {\n    const result = await db.update(chatRooms).set(updates).where(eq(chatRooms.id, id)).returning();\n    return result[0];\n  }\n\n  async getChatMessages(roomId: string, limit = 50, offset = 0): Promise<ChatMessage[]> {\n    return db.select().from(chatMessages)\n      .where(eq(chatMessages.roomId, roomId))\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const result = await db.insert(chatMessages).values(message).returning();\n    return result[0];\n  }\n\n  async deleteExpiredMessages(): Promise<void> {\n    await db.delete(chatMessages)\n      .where(\n        and(\n          eq(chatMessages.isEphemeral, true),\n          lte(chatMessages.expiresAt || new Date(), new Date())\n        )\n      );\n  }\n\n  async getCounters(accountId: string): Promise<Counter[]> {\n    return db.select().from(counters)\n      .where(eq(counters.accountId, accountId))\n      .orderBy(desc(counters.createdAt));\n  }\n\n  async createCounter(counter: InsertCounter): Promise<Counter> {\n    const result = await db.insert(counters).values(counter).returning();\n    return result[0];\n  }\n\n  async updateCounter(id: string, updates: Partial<InsertCounter>): Promise<Counter> {\n    const result = await db.update(counters).set(updates).where(eq(counters.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCounter(id: string): Promise<void> {\n    await db.delete(counters).where(eq(counters.id, id));\n  }\n\n  async getWishlist(userId: string): Promise<Wishlist[]> {\n    return db.select().from(wishlists)\n      .where(eq(wishlists.userId, userId))\n      .orderBy(desc(wishlists.priority), desc(wishlists.createdAt));\n  }\n\n  async createWishlistItem(item: InsertWishlist): Promise<Wishlist> {\n    const result = await db.insert(wishlists).values(item).returning();\n    return result[0];\n  }\n\n  async updateWishlistItem(id: string, updates: Partial<InsertWishlist>): Promise<Wishlist> {\n    const result = await db.update(wishlists).set(updates).where(eq(wishlists.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteWishlistItem(id: string): Promise<void> {\n    await db.delete(wishlists).where(eq(wishlists.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11201},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\"),\n  googleId: text(\"google_id\").unique(),\n  role: text(\"role\").notNull().default(\"guest\"), // main_admin, co_admin, guest\n  avatar: text(\"avatar\"),\n  status: text(\"status\"),\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\"),\n  accountId: varchar(\"account_id\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const accounts = pgTable(\"accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  invitationCode: text(\"invitation_code\").unique(),\n  theme: text(\"theme\").default(\"dark\"),\n  font: text(\"font\").default(\"Inter\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const memories = pgTable(\"memories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  type: text(\"type\").notNull(), // photo, video, quote, multi\n  content: jsonb(\"content\").notNull(),\n  description: text(\"description\"),\n  hashtags: text(\"hashtags\").array(),\n  visibility: text(\"visibility\").default(\"all\"), // all, admins, specific_guests\n  visibleTo: text(\"visible_to\").array(),\n  isPinned: boolean(\"is_pinned\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const memoryComments = pgTable(\"memory_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  memoryId: varchar(\"memory_id\").references(() => memories.id, { onDelete: \"cascade\" }),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const chatRooms = pgTable(\"chat_rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  participant1Id: varchar(\"participant1_id\").references(() => users.id),\n  participant2Id: varchar(\"participant2_id\").references(() => users.id),\n  passwordHash: text(\"password_hash\"),\n  background: text(\"background\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").references(() => chatRooms.id, { onDelete: \"cascade\" }),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  content: text(\"content\"),\n  type: text(\"type\").notNull(), // text, photo, video, ephemeral_photo, ephemeral_video\n  attachments: jsonb(\"attachments\"),\n  isEphemeral: boolean(\"is_ephemeral\").default(false),\n  expiresAt: timestamp(\"expires_at\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const counters = pgTable(\"counters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // countdown, count_up\n  targetDate: timestamp(\"target_date\"),\n  startDate: timestamp(\"start_date\"),\n  isEnabled: boolean(\"is_enabled\").default(true),\n  icon: text(\"icon\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const wishlists = pgTable(\"wishlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  link: text(\"link\"),\n  priority: integer(\"priority\").default(0),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const invitations = pgTable(\"invitations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  createdById: varchar(\"created_by_id\").references(() => users.id),\n  isUsed: boolean(\"is_used\").default(false),\n  usedById: varchar(\"used_by_id\").references(() => users.id),\n  usedAt: timestamp(\"used_at\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  type: text(\"type\").notNull(),\n  data: jsonb(\"data\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMemorySchema = createInsertSchema(memories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMemoryCommentSchema = createInsertSchema(memoryComments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatRoomSchema = createInsertSchema(chatRooms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCounterSchema = createInsertSchema(counters).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistSchema = createInsertSchema(wishlists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvitationSchema = createInsertSchema(invitations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameSchema = createInsertSchema(games).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\n\nexport type Memory = typeof memories.$inferSelect;\nexport type InsertMemory = z.infer<typeof insertMemorySchema>;\n\nexport type MemoryComment = typeof memoryComments.$inferSelect;\nexport type InsertMemoryComment = z.infer<typeof insertMemoryCommentSchema>;\n\nexport type ChatRoom = typeof chatRooms.$inferSelect;\nexport type InsertChatRoom = z.infer<typeof insertChatRoomSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type Counter = typeof counters.$inferSelect;\nexport type InsertCounter = z.infer<typeof insertCounterSchema>;\n\nexport type Wishlist = typeof wishlists.$inferSelect;\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\n\nexport type Invitation = typeof invitations.$inferSelect;\nexport type InsertInvitation = z.infer<typeof insertInvitationSchema>;\n\nexport type Game = typeof games.$inferSelect;\nexport type InsertGame = z.infer<typeof insertGameSchema>;\n","size_bytes":7264},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { WebSocketProvider } from \"@/hooks/use-websocket\";\nimport AuthPage from \"@/pages/auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Chat from \"@/pages/chat\";\nimport Profile from \"@/pages/profile\";\nimport Settings from \"@/pages/settings\";\nimport ProtectedRoute from \"@/components/protected-route\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={AuthPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/chat\">\n        <ProtectedRoute>\n          <Chat />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/profile\">\n        <ProtectedRoute>\n          <Profile />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <WebSocketProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </WebSocketProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1790},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsla(0, 0%, 100%, 0.05);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsla(0, 0%, 100%, 0.08);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(243, 75%, 59%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsla(0, 0%, 100%, 0.1);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsla(0, 0%, 100%, 0.06);\n  --muted-foreground: hsl(0, 0%, 70%);\n  --accent: hsla(0, 0%, 100%, 0.1);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsla(0, 0%, 100%, 0.1);\n  --input: hsla(0, 0%, 100%, 0.05);\n  --ring: hsl(243, 75%, 59%);\n  --chart-1: hsl(243, 75%, 59%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsla(0, 0%, 100%, 0.05);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(243, 75%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsla(0, 0%, 100%, 0.1);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsla(0, 0%, 100%, 0.1);\n  --sidebar-ring: hsl(243, 75%, 59%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00), 0px 1px 2px -1px hsla(243, 75%, 59%, 0.00);\n  --shadow: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00), 0px 1px 2px -1px hsla(243, 75%, 59%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00), 0px 2px 4px -1px hsla(243, 75%, 59%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00), 0px 4px 6px -1px hsla(243, 75%, 59%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00), 0px 8px 10px -1px hsla(243, 75%, 59%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsla(243, 75%, 59%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n[data-theme=\"light\"] {\n  --background: hsl(0, 0%, 96%);\n  --foreground: hsl(0, 0%, 4%);\n  --card: hsla(0, 0%, 100%, 0.7);\n  --card-foreground: hsl(0, 0%, 4%);\n  --popover: hsla(0, 0%, 100%, 0.9);\n  --popover-foreground: hsl(0, 0%, 4%);\n  --primary: hsl(243, 75%, 59%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsla(0, 0%, 100%, 0.6);\n  --secondary-foreground: hsl(0, 0%, 4%);\n  --muted: hsla(0, 0%, 100%, 0.4);\n  --muted-foreground: hsl(0, 0%, 40%);\n  --accent: hsla(0, 0%, 100%, 0.6);\n  --accent-foreground: hsl(0, 0%, 4%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsla(0, 0%, 0%, 0.1);\n  --input: hsla(0, 0%, 100%, 0.8);\n  --ring: hsl(243, 75%, 59%);\n  --sidebar: hsla(0, 0%, 100%, 0.7);\n  --sidebar-foreground: hsl(0, 0%, 4%);\n  --sidebar-border: hsla(0, 0%, 0%, 0.1);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground overflow-x-hidden;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .glass-morphism {\n    background: var(--card);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border: 1px solid var(--border);\n  }\n\n  .glass-strong {\n    background: var(--popover);\n    backdrop-filter: blur(30px);\n    -webkit-backdrop-filter: blur(30px);\n    border: 1px solid var(--border);\n  }\n\n  .tab-active {\n    background: linear-gradient(135deg, hsl(243, 75%, 59%) 0%, hsl(199, 89%, 48%) 100%);\n    color: white;\n  }\n\n  .btn-primary {\n    background: linear-gradient(135deg, hsl(243, 75%, 59%) 0%, hsl(199, 89%, 48%) 100%);\n    color: white;\n    border: none;\n  }\n\n  .btn-primary:hover {\n    background: linear-gradient(135deg, hsl(243, 75%, 65%) 0%, hsl(199, 89%, 55%) 100%);\n    transform: translateY(-1px);\n  }\n\n  .online-indicator {\n    background: hsl(142, 76%, 36%);\n    box-shadow: 0 0 10px hsla(142, 76%, 36%, 0.5);\n  }\n\n  .message-ephemeral {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .message-ephemeral::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n    animation: shimmer 2s infinite;\n  }\n\n  .story-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .story-card:hover {\n    transform: translateY(-5px) scale(1.02);\n  }\n\n  .memory-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 1.5rem;\n    grid-auto-rows: masonry;\n  }\n\n  @supports not (grid-template-rows: masonry) {\n    .memory-grid {\n      display: flex;\n      flex-wrap: wrap;\n      align-items: flex-start;\n    }\n  }\n}\n\n@keyframes glassMorph {\n  0% { opacity: 0; transform: translateY(20px) scale(0.95); }\n  100% { opacity: 1; transform: translateY(0) scale(1); }\n}\n\n@keyframes pulseSoft {\n  0%, 100% { opacity: 0.6; transform: scale(1); }\n  50% { opacity: 1; transform: scale(1.05); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes shimmer {\n  0% { left: -100%; }\n  100% { left: 100%; }\n}\n\n.animate-glass-morph {\n  animation: glassMorph 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.animate-pulse-soft {\n  animation: pulseSoft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n","size_bytes":5653},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-message.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ChatMessage as ChatMessageType } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatMessageProps {\n  message: ChatMessageType;\n  partnerAvatar?: string;\n  partnerUsername?: string;\n}\n\nexport function ChatMessage({ message, partnerAvatar, partnerUsername }: ChatMessageProps) {\n  const { user } = useAuth();\n  const isOwnMessage = message.authorId === user?.id;\n\n  const formatTime = (date: Date | string) => {\n    return new Date(date).toLocaleTimeString(\"ru-RU\", { \n      hour: \"2-digit\", \n      minute: \"2-digit\" \n    });\n  };\n\n  const renderMessageContent = () => {\n    if (message.isEphemeral && message.expiresAt && new Date() > new Date(message.expiresAt)) {\n      return (\n        <div className=\"text-xs text-muted-foreground italic\">\n          {message.type === \"ephemeral_video\" ? \"Видеосообщение\" : \"Фото\"} (истекло)\n        </div>\n      );\n    }\n\n    switch (message.type) {\n      case \"text\":\n        return <p className=\"text-sm\">{message.content}</p>;\n      \n      case \"ephemeral_photo\":\n        const attachments = message.attachments as any;\n        const timeLeft = message.expiresAt \n          ? Math.max(0, Math.floor((new Date(message.expiresAt).getTime() - Date.now()) / 1000))\n          : 0;\n        \n        return (\n          <div className=\"relative message-ephemeral\">\n            <img \n              src={attachments?.url} \n              alt=\"Ephemeral photo\" \n              className=\"w-full rounded-lg max-w-48\"\n            />\n            <div className=\"absolute top-2 right-2 bg-black/60 text-white text-xs px-2 py-1 rounded\">\n              🔥 {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Фото исчезнет через {Math.floor(timeLeft / 60)} мин {timeLeft % 60} сек\n            </p>\n          </div>\n        );\n      \n      case \"ephemeral_video\":\n        const videoAttachments = message.attachments as any;\n        const videoTimeLeft = message.expiresAt \n          ? Math.max(0, Math.floor((new Date(message.expiresAt).getTime() - Date.now()) / 1000))\n          : 0;\n        \n        return (\n          <div className=\"relative message-ephemeral\">\n            <video \n              src={videoAttachments?.url} \n              controls\n              className=\"w-full rounded-lg max-w-48\"\n            />\n            <div className=\"absolute top-2 right-2 bg-black/60 text-white text-xs px-2 py-1 rounded\">\n              🔥 {Math.floor(videoTimeLeft / 60)}:{(videoTimeLeft % 60).toString().padStart(2, '0')}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Видео исчезнет через {Math.floor(videoTimeLeft / 60)} мин {videoTimeLeft % 60} сек\n            </p>\n          </div>\n        );\n      \n      case \"photo\":\n        const photoAttachments = message.attachments as any;\n        return (\n          <img \n            src={photoAttachments?.url} \n            alt=\"Photo message\" \n            className=\"w-full rounded-lg max-w-48\"\n          />\n        );\n      \n      case \"video\":\n        const videoAttachment = message.attachments as any;\n        return (\n          <video \n            src={videoAttachment?.url} \n            controls\n            className=\"w-full rounded-lg max-w-48\"\n          />\n        );\n      \n      default:\n        return <p className=\"text-sm\">{message.content}</p>;\n    }\n  };\n\n  // Check for animated words\n  const checkForAnimatedWords = (content: string) => {\n    const animatedWords = [\"люблю\", \"love\"];\n    let processedContent = content;\n    \n    animatedWords.forEach(word => {\n      const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n      processedContent = processedContent.replace(regex, `<span class=\"animate-pulse-soft\">${word}</span>`);\n    });\n    \n    return processedContent !== content;\n  };\n\n  const hasAnimatedWords = message.content && checkForAnimatedWords(message.content);\n\n  return (\n    <div className={cn(\n      \"flex items-end gap-2\",\n      isOwnMessage ? \"justify-end\" : \"\"\n    )} data-testid={`chat-message-${message.id}`}>\n      {!isOwnMessage && (\n        <Avatar className=\"w-6 h-6\">\n          <AvatarImage src={partnerAvatar} alt={partnerUsername} />\n          <AvatarFallback>\n            {partnerUsername?.charAt(0).toUpperCase() || \"P\"}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      \n      <div className={cn(\n        \"p-3 rounded-2xl max-w-xs\",\n        isOwnMessage \n          ? \"bg-primary text-white rounded-br-md\" \n          : \"glass-morphism rounded-bl-md\",\n        hasAnimatedWords && \"animate-pulse-soft\"\n      )}>\n        <div className=\"mb-1\">\n          {renderMessageContent()}\n        </div>\n        <p className={cn(\n          \"text-xs mt-1\",\n          isOwnMessage ? \"text-white/70\" : \"text-muted-foreground\"\n        )} data-testid=\"text-message-time\">\n          {formatTime(message.createdAt!)}\n        </p>\n      </div>\n      \n      {isOwnMessage && (\n        <Avatar className=\"w-6 h-6\">\n          <AvatarImage src={user?.avatar} alt={user?.username} />\n          <AvatarFallback>\n            {user?.username?.charAt(0).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n      )}\n    </div>\n  );\n}\n","size_bytes":5523},"client/src/components/counter-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Clock, Heart, Calendar, Zap } from \"lucide-react\";\nimport { Counter } from \"@shared/schema\";\nimport { differenceInDays, differenceInHours, differenceInMinutes } from \"date-fns\";\n\ninterface CounterCardProps {\n  counter: Counter;\n}\n\nexport function CounterCard({ counter }: CounterCardProps) {\n  const getTimeUntil = () => {\n    if (!counter.targetDate) return null;\n    \n    const now = new Date();\n    const target = new Date(counter.targetDate);\n    \n    if (counter.type === \"countdown\") {\n      const days = differenceInDays(target, now);\n      if (days > 0) {\n        return `${days} дней`;\n      }\n      \n      const hours = differenceInHours(target, now);\n      if (hours > 0) {\n        return `${hours} часов`;\n      }\n      \n      const minutes = differenceInMinutes(target, now);\n      return `${Math.max(0, minutes)} минут`;\n    }\n    \n    if (counter.type === \"count_up\" && counter.startDate) {\n      const start = new Date(counter.startDate);\n      const days = differenceInDays(now, start);\n      return `${days} дней`;\n    }\n    \n    return null;\n  };\n\n  const getIcon = () => {\n    switch (counter.icon) {\n      case \"heart\":\n        return <Heart className=\"w-4 h-4 text-red-400\" />;\n      case \"calendar\":\n        return <Calendar className=\"w-4 h-4 text-blue-400\" />;\n      case \"zap\":\n        return <Zap className=\"w-4 h-4 text-yellow-400\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-primary\" />;\n    }\n  };\n\n  const timeValue = getTimeUntil();\n\n  return (\n    <Card className=\"glass-morphism border-border\" data-testid={`counter-${counter.id}`}>\n      <CardContent className=\"p-3\">\n        <div className=\"flex items-center justify-between mb-1\">\n          <span className=\"text-sm font-medium\" data-testid=\"text-counter-name\">\n            {counter.name}\n          </span>\n          {getIcon()}\n        </div>\n        {timeValue && (\n          <p className=\"text-lg font-bold\" data-testid=\"text-counter-value\">\n            {timeValue}\n          </p>\n        )}\n        {counter.description && (\n          <p className=\"text-xs text-muted-foreground mt-1\" data-testid=\"text-counter-description\">\n            {counter.description}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2322},"client/src/components/logo.tsx":{"content":"export function Logo({ className = \"w-16 h-16\" }: { className?: string }) {\n  return (\n    <div className={`flex items-center justify-center ${className}`}>\n      <svg viewBox=\"0 0 100 100\" className=\"w-full h-full\">\n        <defs>\n          <linearGradient id=\"logoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" style={{ stopColor: \"#4F46E5\", stopOpacity: 1 }} />\n            <stop offset=\"100%\" style={{ stopColor: \"#06B6D4\", stopOpacity: 1 }} />\n          </linearGradient>\n        </defs>\n        <path \n          d=\"M20 35 C20 20, 35 20, 50 35 C65 20, 80 20, 80 35 C80 50, 65 50, 50 35 C35 50, 20 50, 20 35 Z\" \n          fill=\"url(#logoGradient)\" \n          stroke=\"none\" \n          strokeWidth=\"0\"\n        />\n        <circle cx=\"50\" cy=\"65\" r=\"12\" fill=\"url(#logoGradient)\" />\n        <circle cx=\"65\" cy=\"55\" r=\"8\" fill=\"url(#logoGradient)\" />\n      </svg>\n    </div>\n  );\n}\n","size_bytes":909},"client/src/components/memory-card.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, MessageCircle, Play } from \"lucide-react\";\nimport { Memory } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\n\ninterface MemoryCardProps {\n  memory: Memory;\n  onComment?: (memoryId: string) => void;\n  onLike?: (memoryId: string) => void;\n}\n\nexport function MemoryCard({ memory, onComment, onLike }: MemoryCardProps) {\n  const formatDate = (date: Date | string) => {\n    return formatDistanceToNow(new Date(date), { locale: ru, addSuffix: true });\n  };\n\n  const renderContent = () => {\n    const content = memory.content as any;\n    \n    switch (memory.type) {\n      case \"photo\":\n        return (\n          <img \n            src={content.url} \n            alt=\"Memory photo\" \n            className=\"w-full h-48 object-cover rounded-t-2xl\"\n          />\n        );\n      \n      case \"video\":\n        return (\n          <div className=\"relative\">\n            <img \n              src={content.thumbnail || content.url} \n              alt=\"Video thumbnail\" \n              className=\"w-full h-48 object-cover rounded-t-2xl\"\n            />\n            <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center\">\n              <Button \n                size=\"lg\"\n                className=\"w-12 h-12 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors\"\n                data-testid=\"button-play-video\"\n              >\n                <Play className=\"w-6 h-6 text-gray-800 ml-0.5 fill-current\" />\n              </Button>\n            </div>\n            <div className=\"absolute bottom-2 right-2 bg-black/60 text-white text-xs px-2 py-1 rounded\">\n              {content.duration || \"0:00\"}\n            </div>\n          </div>\n        );\n      \n      case \"quote\":\n        return (\n          <div className=\"p-6 text-center\">\n            <div className=\"text-4xl mb-4\">{content.emoji || \"💕\"}</div>\n            <blockquote className=\"text-lg font-medium mb-4\">\n              \"{content.text}\"\n            </blockquote>\n          </div>\n        );\n      \n      case \"multi\":\n        const images = content.images || [];\n        if (images.length === 1) {\n          return <img src={images[0].url} alt=\"Memory\" className=\"w-full h-48 object-cover rounded-t-2xl\" />;\n        }\n        \n        return (\n          <div className=\"grid grid-cols-2 gap-0.5 rounded-t-2xl overflow-hidden\">\n            {images.slice(0, 3).map((img: any, idx: number) => (\n              <img key={idx} src={img.url} alt={`Memory ${idx + 1}`} className=\"w-full h-24 object-cover\" />\n            ))}\n            {images.length > 3 && (\n              <div className=\"w-full h-24 bg-black/60 flex items-center justify-center text-white text-lg font-bold\">\n                +{images.length - 3}\n              </div>\n            )}\n          </div>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <article className=\"story-card glass-morphism rounded-2xl overflow-hidden\" data-testid={`memory-card-${memory.id}`}>\n      {renderContent()}\n      \n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"w-6 h-6\">\n              <AvatarFallback>\n                {/* TODO: Get author data */}\n                U\n              </AvatarFallback>\n            </Avatar>\n            <span className=\"text-sm font-medium\" data-testid=\"text-author\">\n              {/* TODO: Get author username */}\n              Автор\n            </span>\n          </div>\n          <span className=\"text-xs text-muted-foreground\" data-testid=\"text-date\">\n            {formatDate(memory.createdAt!)}\n          </span>\n        </div>\n        \n        {memory.description && (\n          <p className=\"text-sm mb-3\" data-testid=\"text-description\">\n            {memory.description}\n          </p>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {memory.hashtags?.map((tag, idx) => (\n              <Badge \n                key={idx} \n                variant=\"secondary\" \n                className=\"text-xs bg-primary/20 text-primary px-2 py-1 rounded-full\"\n                data-testid={`badge-hashtag-${idx}`}\n              >\n                #{tag}\n              </Badge>\n            ))}\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"p-1 hover:bg-accent/20 rounded transition-colors\"\n              onClick={() => onLike?.(memory.id)}\n              data-testid=\"button-like\"\n            >\n              <Heart className=\"w-4 h-4 text-red-400 fill-current\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"p-1 hover:bg-accent/20 rounded transition-colors\"\n              onClick={() => onComment?.(memory.id)}\n              data-testid=\"button-comment\"\n            >\n              <MessageCircle className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </article>\n  );\n}\n","size_bytes":5401},"client/src/components/navigation.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { Logo } from \"./logo\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Search, LogOut, Settings, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function Navigation() {\n  const { user, logout } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const [location, navigate] = useLocation();\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-40 glass-strong border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo & Brand */}\n          <Link href=\"/dashboard\" data-testid=\"link-home\">\n            <div className=\"flex items-center cursor-pointer\">\n              <Logo className=\"w-8 h-8 mr-3\" />\n              <span className=\"text-lg font-semibold\">Endlessalbum</span>\n            </div>\n          </Link>\n\n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-lg mx-8\">\n            <div className=\"relative\">\n              <Input \n                type=\"text\" \n                placeholder=\"Поиск воспоминаний, хэштегов, дат...\" \n                className=\"w-full pl-10 pr-4 py-2 glass-morphism rounded-full border-0 focus:ring-2 focus:ring-primary outline-none transition-all\"\n                data-testid=\"input-search\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            </div>\n          </div>\n\n          {/* User Menu & Theme Toggle */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <Button \n              onClick={toggleTheme}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-3 rounded-full glass-morphism\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === \"dark\" ? (\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <circle cx=\"12\" cy=\"12\" r=\"5\"></circle>\n                  <path d=\"M12 1v2m0 18v2M4.2 4.2l1.4 1.4m12.8 12.8l1.4 1.4M1 12h2m18 0h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4\"></path>\n                </svg>\n              ) : (\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"></path>\n                </svg>\n              )}\n            </Button>\n\n            {/* Partner Avatar with Online Status */}\n            {/* TODO: Implement partner status */}\n            \n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2 p-2 glass-morphism rounded-full\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={user?.avatar || undefined} alt={user?.username} />\n                    <AvatarFallback>{user?.username?.charAt(0).toUpperCase()}</AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"glass-morphism border-border\">\n                <DropdownMenuItem onClick={() => navigate(\"/profile\")} data-testid=\"menu-profile\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Профиль\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate(\"/settings\")} data-testid=\"menu-settings\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Настройки\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={logout} data-testid=\"menu-logout\">\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Выйти\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4449},"client/src/components/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\n\nexport default function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"glass-morphism p-8 rounded-3xl\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    setLocation(\"/auth\");\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":650},"client/src/components/sidebar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { CounterCard } from \"@/components/counter-card\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Home,\n  Heart,\n  Clock,\n  User,\n  Settings,\n  Plus,\n  MessageCircle,\n  Gift\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Sidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const { data: counters = [] } = useQuery({\n    queryKey: [\"/api/counters\"],\n    enabled: !!user,\n  });\n\n  const navItems = [\n    {\n      href: \"/dashboard\",\n      label: \"Главная\",\n      icon: Home,\n    },\n    {\n      href: \"/profile\",\n      label: \"Список желаний\",\n      icon: Gift,\n    },\n    {\n      href: \"/settings\",\n      label: \"Счетчики и таймеры\",\n      icon: Clock,\n    },\n    {\n      href: \"/profile\",\n      label: \"Личный кабинет\",\n      icon: User,\n    },\n    {\n      href: \"/settings\",\n      label: \"Настройки\",\n      icon: Settings,\n    },\n  ];\n\n  const handleCreateMemory = () => {\n    // TODO: Implement create memory modal\n    console.log(\"Create memory\");\n  };\n\n  return (\n    <aside className=\"fixed left-0 top-16 bottom-0 w-64 glass-morphism border-r border-border z-30 overflow-y-auto\">\n      <div className=\"p-6\">\n        {/* Quick Actions */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider mb-3\">\n            Быстрые действия\n          </h3>\n          <div className=\"space-y-2\">\n            <Button \n              onClick={handleCreateMemory}\n              className=\"w-full btn-primary py-3 rounded-xl font-medium transition-all duration-300 flex items-center justify-center gap-2\"\n              data-testid=\"button-create-memory\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Создать воспоминание\n            </Button>\n            <Link href=\"/chat\" className=\"block\">\n              <Button \n                variant=\"outline\"\n                className=\"w-full glass-morphism py-3 rounded-xl font-medium transition-all duration-300 flex items-center justify-center gap-2 hover:scale-[1.02] border-border\"\n                data-testid=\"button-open-chat\"\n              >\n                <MessageCircle className=\"w-4 h-4\" />\n                Личные сообщения\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"space-y-1 mb-8\">\n          <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider mb-3\">\n            Навигация\n          </h3>\n          \n          {navItems.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.href} href={item.href}>\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start gap-3 px-3 py-2 rounded-lg transition-all\",\n                    isActive \n                      ? \"text-foreground bg-accent/20 border border-border\" \n                      : \"text-muted-foreground hover:text-foreground hover:bg-accent/10\"\n                  )}\n                  data-testid={`nav-${item.href.slice(1)}`}\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  {item.label}\n                </Button>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Counters Section */}\n        <div>\n          <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider mb-3\">\n            Важные даты\n          </h3>\n          <div className=\"space-y-3\">\n            {counters.length === 0 ? (\n              <div className=\"glass-morphism p-4 rounded-lg text-center\">\n                <Clock className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Счетчики не настроены\n                </p>\n                <Link href=\"/settings\">\n                  <Button \n                    variant=\"link\" \n                    size=\"sm\" \n                    className=\"text-primary p-0 h-auto mt-1\"\n                    data-testid=\"link-setup-counters\"\n                  >\n                    Настроить\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              counters.slice(0, 3).map((counter: any) => (\n                <CounterCard key={counter.id} counter={counter} />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4793},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"dark\";\n    }\n    return \"dark\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"light\") {\n      root.setAttribute(\"data-theme\", \"light\");\n    } else {\n      root.removeAttribute(\"data-theme\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1245},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { User } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  invitationLogin: (data: InvitationLoginData) => Promise<void>;\n  invitationRegister: (data: InvitationRegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\ninterface LoginCredentials {\n  emailOrUsername: string;\n  password: string;\n}\n\ninterface RegisterData {\n  email: string;\n  username: string;\n  password: string;\n  confirmPassword: string;\n}\n\ninterface InvitationLoginData extends LoginCredentials {\n  invitationCode: string;\n}\n\ninterface InvitationRegisterData extends RegisterData {\n  invitationCode: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 0,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const invitationLoginMutation = useMutation({\n    mutationFn: async (data: InvitationLoginData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/invitation-login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const invitationRegisterMutation = useMutation({\n    mutationFn: async (data: InvitationRegisterData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/invitation-register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n\n  const login = async (credentials: LoginCredentials) => {\n    await loginMutation.mutateAsync(credentials);\n  };\n\n  const register = async (data: RegisterData) => {\n    await registerMutation.mutateAsync(data);\n  };\n\n  const invitationLogin = async (data: InvitationLoginData) => {\n    await invitationLoginMutation.mutateAsync(data);\n  };\n\n  const invitationRegister = async (data: InvitationRegisterData) => {\n    await invitationRegisterMutation.mutateAsync(data);\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user: user || null,\n      isLoading,\n      login,\n      register,\n      invitationLogin,\n      invitationRegister,\n      logout,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3799},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { useAuth } from \"./use-auth\";\n\ninterface WebSocketContextType {\n  socket: WebSocket | null;\n  isConnected: boolean;\n  sendMessage: (message: any) => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport function WebSocketProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    if (!user) {\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n      }\n      return;\n    }\n\n    const connect = () => {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      const newSocket = new WebSocket(wsUrl);\n\n      newSocket.onopen = () => {\n        setIsConnected(true);\n        // Authenticate with WebSocket\n        newSocket.send(JSON.stringify({\n          type: \"auth\",\n          userId: user.id,\n        }));\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n      };\n\n      newSocket.onclose = () => {\n        setIsConnected(false);\n        setSocket(null);\n        \n        // Attempt to reconnect after 3 seconds\n        if (user) {\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, 3000);\n        }\n      };\n\n      newSocket.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n\n      setSocket(newSocket);\n    };\n\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [user]);\n\n  const sendMessage = (message: any) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider value={{ socket, isConnected, sendMessage }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error(\"useWebSocket must be used within a WebSocketProvider\");\n  }\n  return context;\n}\n","size_bytes":2483},"client/src/lib/auth.ts":{"content":"export const GOOGLE_AUTH_URL = \"/api/auth/google\";\n\nexport function initiateGoogleAuth() {\n  window.location.href = GOOGLE_AUTH_URL;\n}\n","size_bytes":135},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"export interface ChatMessagePayload {\n  type: \"chat_message\";\n  content: string;\n  messageType?: \"text\" | \"photo\" | \"video\" | \"ephemeral_photo\" | \"ephemeral_video\";\n  isEphemeral?: boolean;\n  attachments?: any;\n}\n\nexport interface AuthPayload {\n  type: \"auth\";\n  userId: string;\n}\n\nexport type WebSocketMessage = ChatMessagePayload | AuthPayload;\n","size_bytes":347},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Logo } from \"@/components/logo\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Eye, EyeOff, Sun, Moon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { initiateGoogleAuth } from \"@/lib/auth\";\n\nconst loginSchema = z.object({\n  emailOrUsername: z.string().min(1, \"Введите email или никнейм\"),\n  password: z.string().min(1, \"Введите пароль\"),\n});\n\nconst baseRegisterSchema = z.object({\n  email: z.string().email(\"Некорректный email\"),\n  username: z.string().min(2, \"Никнейм должен содержать минимум 2 символа\"),\n  password: z.string().min(6, \"Пароль должен содержать минимум 6 символов\"),\n  confirmPassword: z.string(),\n  acceptTerms: z.boolean().refine(val => val === true, \"Необходимо согласиться с условиями\"),\n});\n\nconst registerSchema = baseRegisterSchema.refine((data) => data.password === data.confirmPassword, {\n  message: \"Пароли не совпадают\",\n  path: [\"confirmPassword\"],\n});\n\nconst invitationLoginSchema = loginSchema.extend({\n  invitationCode: z.string().min(1, \"Введите код приглашения\"),\n});\n\nconst invitationRegisterSchema = baseRegisterSchema.extend({\n  invitationCode: z.string().min(1, \"Введите код приглашения\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Пароли не совпадают\",\n  path: [\"confirmPassword\"],\n});\n\nexport default function AuthPage() {\n  const { user, login, register, invitationLogin, invitationRegister } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [invitationSubTab, setInvitationSubTab] = useState<\"existing\" | \"new\">(\"existing\");\n\n  if (user) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      emailOrUsername: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      acceptTerms: false,\n    },\n  });\n\n  const invitationLoginForm = useForm({\n    resolver: zodResolver(invitationLoginSchema),\n    defaultValues: {\n      emailOrUsername: \"\",\n      password: \"\",\n      invitationCode: \"\",\n    },\n  });\n\n  const invitationRegisterForm = useForm({\n    resolver: zodResolver(invitationRegisterSchema),\n    defaultValues: {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      invitationCode: \"\",\n      acceptTerms: false,\n    },\n  });\n\n  const handleLogin = async (data: z.infer<typeof loginSchema>) => {\n    try {\n      await login(data);\n      toast({\n        title: \"Добро пожаловать!\",\n        description: \"Вы успешно вошли в систему\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка входа\",\n        description: error.message || \"Проверьте правильность данных\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRegister = async (data: z.infer<typeof registerSchema>) => {\n    try {\n      await register(data);\n      toast({\n        title: \"Регистрация успешна!\",\n        description: \"Добро пожаловать в Endlessalbum\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка регистрации\",\n        description: error.message || \"Попробуйте еще раз\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInvitationLogin = async (data: z.infer<typeof invitationLoginSchema>) => {\n    try {\n      await invitationLogin(data);\n      toast({\n        title: \"Добро пожаловать!\",\n        description: \"Вы успешно присоединились к аккаунту\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка входа\",\n        description: error.message || \"Проверьте код приглашения и данные\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInvitationRegister = async (data: z.infer<typeof invitationRegisterSchema>) => {\n    try {\n      await invitationRegister(data);\n      toast({\n        title: \"Регистрация успешна!\",\n        description: \"Добро пожаловать в Endlessalbum\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка регистрации\",\n        description: error.message || \"Проверьте код приглашения\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Theme Toggle */}\n      <Button \n        onClick={toggleTheme}\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"fixed top-4 right-4 z-50 glass-morphism p-3 rounded-full transition-all duration-300 hover:scale-110\"\n        data-testid=\"button-theme-toggle\"\n      >\n        {theme === \"dark\" ? (\n          <Sun className=\"w-5 h-5\" />\n        ) : (\n          <Moon className=\"w-5 h-5\" />\n        )}\n      </Button>\n\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute top-1/4 left-1/4 w-32 h-32 bg-primary rounded-full blur-3xl animate-float\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-48 h-48 bg-accent rounded-full blur-3xl animate-float\" style={{ animationDelay: \"-3s\" }}></div>\n      </div>\n\n      <div className=\"w-full max-w-6xl mx-auto grid lg:grid-cols-2 gap-8 items-center\">\n        {/* Brand Section */}\n        <div className=\"glass-morphism p-8 lg:p-12 rounded-3xl text-center lg:text-left order-2 lg:order-1 animate-glass-morph\">\n          <div className=\"flex items-center justify-center lg:justify-start mb-6\">\n            <Logo className=\"w-16 h-16 mr-4\" />\n            <h1 className=\"text-3xl lg:text-4xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Endlessalbum\n            </h1>\n          </div>\n          \n          <div className=\"space-y-4 text-muted-foreground\">\n            <h2 className=\"text-xl lg:text-2xl font-semibold text-foreground\">Безграничные воспоминания</h2>\n            <p className=\"text-base lg:text-lg leading-relaxed\">\n              Создавайте общие воспоминания, делитесь моментами и храните самые дорогие мгновения вместе. \n              Ваша личная вселенная любви и заботы.\n            </p>\n            <p className=\"text-sm\">\n              Приватность • Безопасность • Вечность\n            </p>\n          </div>\n        </div>\n\n        {/* Auth Tabs */}\n        <div className=\"order-1 lg:order-2 animate-glass-morph\" style={{ animationDelay: \"0.2s\" }}>\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <div className=\"glass-strong p-2 rounded-2xl mb-6\">\n              <TabsList className=\"grid w-full grid-cols-3 bg-transparent\">\n                <TabsTrigger \n                  value=\"login\" \n                  className=\"data-[state=active]:tab-active\"\n                  data-testid=\"tab-login\"\n                >\n                  Вход\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"register\"\n                  className=\"data-[state=active]:tab-active\"\n                  data-testid=\"tab-register\"\n                >\n                  Регистрация\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"invitation\"\n                  className=\"data-[state=active]:tab-active\"\n                  data-testid=\"tab-invitation\"\n                >\n                  Приглашение\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            {/* Login Tab */}\n            <TabsContent value=\"login\">\n              <Card className=\"glass-strong border-0\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-bold mb-6 text-center\">Добро пожаловать обратно</h3>\n                  \n                  <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\">Email или никнейм</Label>\n                      <Input \n                        {...loginForm.register(\"emailOrUsername\")}\n                        className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                        placeholder=\"example@mail.com или nickname\"\n                        data-testid=\"input-email-username\"\n                      />\n                      {loginForm.formState.errors.emailOrUsername && (\n                        <p className=\"text-destructive text-sm mt-1\">\n                          {loginForm.formState.errors.emailOrUsername.message}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\">Пароль</Label>\n                      <div className=\"relative\">\n                        <Input \n                          {...loginForm.register(\"password\")}\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary pr-12\"\n                          placeholder=\"Введите пароль\"\n                          data-testid=\"input-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-destructive text-sm mt-1\">\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <label className=\"flex items-center\">\n                        <Checkbox className=\"mr-2\" data-testid=\"checkbox-remember\" />\n                        <span>Запомнить меня</span>\n                      </label>\n                      <Button variant=\"link\" className=\"text-primary p-0 h-auto\" data-testid=\"link-forgot-password\">\n                        Забыли пароль?\n                      </Button>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full btn-primary py-4 rounded-xl font-medium transition-all duration-300\"\n                      disabled={loginForm.formState.isSubmitting}\n                      data-testid=\"button-submit-login\"\n                    >\n                      {loginForm.formState.isSubmitting ? \"Вход...\" : \"Войти\"}\n                    </Button>\n\n                    <div className=\"relative my-6\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <div className=\"w-full border-t border-border\"></div>\n                      </div>\n                      <div className=\"relative flex justify-center text-sm\">\n                        <span className=\"px-4 bg-card text-muted-foreground\">или</span>\n                      </div>\n                    </div>\n\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"w-full glass-morphism py-4 rounded-xl font-medium transition-all duration-300 flex items-center justify-center gap-3 hover:scale-[1.02] border-border\"\n                      onClick={initiateGoogleAuth}\n                      data-testid=\"button-google-auth\"\n                    >\n                      <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n                        <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                        <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                        <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                        <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                      </svg>\n                      Войти через Google\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Register Tab */}\n            <TabsContent value=\"register\">\n              <Card className=\"glass-strong border-0\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-bold mb-6 text-center\">Создать аккаунт</h3>\n                  \n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(handleRegister)} className=\"space-y-4\">\n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\">Email</Label>\n                      <Input \n                        {...registerForm.register(\"email\")}\n                        type=\"email\"\n                        className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                        placeholder=\"example@mail.com\"\n                        data-testid=\"input-register-email\"\n                      />\n                      {registerForm.formState.errors.email && (\n                        <p className=\"text-destructive text-sm mt-1\">\n                          {registerForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\">Никнейм</Label>\n                      <Input \n                        {...registerForm.register(\"username\")}\n                        className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                        placeholder=\"Уникальный никнейм\"\n                        data-testid=\"input-register-username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-destructive text-sm mt-1\">\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\">Пароль</Label>\n                      <div className=\"relative\">\n                        <Input \n                          {...registerForm.register(\"password\")}\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary pr-12\"\n                          placeholder=\"Надежный пароль\"\n                          data-testid=\"input-register-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-register-password\"\n                        >\n                          {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-destructive text-sm mt-1\">\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\">Подтверждение пароля</Label>\n                      <div className=\"relative\">\n                        <Input \n                          {...registerForm.register(\"confirmPassword\")}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary pr-12\"\n                          placeholder=\"Повторите пароль\"\n                          data-testid=\"input-confirm-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          data-testid=\"button-toggle-confirm-password\"\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                      {registerForm.formState.errors.confirmPassword && (\n                        <p className=\"text-destructive text-sm mt-1\">\n                          {registerForm.formState.errors.confirmPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"acceptTerms\"\n                      render={({ field }) => (\n                        <FormItem className=\"text-sm text-muted-foreground\">\n                          <div className=\"flex items-start\">\n                            <FormControl>\n                              <Checkbox \n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                className=\"mt-0.5 mr-3\"\n                                data-testid=\"checkbox-accept-terms\"\n                              />\n                            </FormControl>\n                            <span>\n                              Я согласен с{\" \"}\n                              <Button variant=\"link\" className=\"text-primary p-0 h-auto\" data-testid=\"link-terms\">\n                                условиями использования\n                              </Button>\n                              {\" \"}и{\" \"}\n                              <Button variant=\"link\" className=\"text-primary p-0 h-auto\" data-testid=\"link-privacy\">\n                                политикой конфиденциальности\n                              </Button>\n                            </span>\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full btn-primary py-4 rounded-xl font-medium transition-all duration-300\"\n                      disabled={registerForm.formState.isSubmitting}\n                      data-testid=\"button-submit-register\"\n                    >\n                      {registerForm.formState.isSubmitting ? \"Регистрация...\" : \"Зарегистрироваться\"}\n                    </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Invitation Tab */}\n            <TabsContent value=\"invitation\">\n              <Card className=\"glass-strong border-0\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-bold mb-6 text-center\">Присоединиться по приглашению</h3>\n                  \n                  {/* Sub-tabs for invitation */}\n                  <div className=\"glass-morphism p-1 rounded-xl mb-6 flex\">\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 ${\n                        invitationSubTab === \"existing\" ? \"tab-active\" : \"\"\n                      }`}\n                      onClick={() => setInvitationSubTab(\"existing\")}\n                      data-testid=\"button-invitation-existing\"\n                    >\n                      У меня есть аккаунт\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 ${\n                        invitationSubTab === \"new\" ? \"tab-active\" : \"\"\n                      }`}\n                      onClick={() => setInvitationSubTab(\"new\")}\n                      data-testid=\"button-invitation-new\"\n                    >\n                      У меня нет аккаунта\n                    </Button>\n                  </div>\n\n                  {/* Existing Account Form */}\n                  {invitationSubTab === \"existing\" && (\n                    <form onSubmit={invitationLoginForm.handleSubmit(handleInvitationLogin)} className=\"space-y-4\">\n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Email или никнейм</Label>\n                        <Input \n                          {...invitationLoginForm.register(\"emailOrUsername\")}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                          placeholder=\"example@mail.com или nickname\"\n                          data-testid=\"input-invitation-email-username\"\n                        />\n                        {invitationLoginForm.formState.errors.emailOrUsername && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationLoginForm.formState.errors.emailOrUsername.message}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Пароль</Label>\n                        <div className=\"relative\">\n                          <Input \n                            {...invitationLoginForm.register(\"password\")}\n                            type={showPassword ? \"text\" : \"password\"}\n                            className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary pr-12\"\n                            placeholder=\"Введите пароль\"\n                            data-testid=\"input-invitation-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-invitation-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                          </Button>\n                        </div>\n                        {invitationLoginForm.formState.errors.password && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationLoginForm.formState.errors.password.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Код приглашения</Label>\n                        <Input \n                          {...invitationLoginForm.register(\"invitationCode\")}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary text-center font-mono\"\n                          placeholder=\"XXXX-XXXX-XXXX\"\n                          data-testid=\"input-invitation-code\"\n                        />\n                        {invitationLoginForm.formState.errors.invitationCode && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationLoginForm.formState.errors.invitationCode.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full btn-primary py-4 rounded-xl font-medium transition-all duration-300\"\n                        disabled={invitationLoginForm.formState.isSubmitting}\n                        data-testid=\"button-submit-invitation-login\"\n                      >\n                        {invitationLoginForm.formState.isSubmitting ? \"Присоединение...\" : \"Присоединиться\"}\n                      </Button>\n                    </form>\n                  )}\n\n                  {/* New Account Form */}\n                  {invitationSubTab === \"new\" && (\n                    <form onSubmit={invitationRegisterForm.handleSubmit(handleInvitationRegister)} className=\"space-y-4\">\n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Email</Label>\n                        <Input \n                          {...invitationRegisterForm.register(\"email\")}\n                          type=\"email\"\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                          placeholder=\"example@mail.com\"\n                          data-testid=\"input-invitation-register-email\"\n                        />\n                        {invitationRegisterForm.formState.errors.email && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationRegisterForm.formState.errors.email.message}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Никнейм</Label>\n                        <Input \n                          {...invitationRegisterForm.register(\"username\")}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                          placeholder=\"Уникальный никнейм\"\n                          data-testid=\"input-invitation-register-username\"\n                        />\n                        {invitationRegisterForm.formState.errors.username && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationRegisterForm.formState.errors.username.message}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Пароль</Label>\n                        <div className=\"relative\">\n                          <Input \n                            {...invitationRegisterForm.register(\"password\")}\n                            type={showPassword ? \"text\" : \"password\"}\n                            className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary pr-12\"\n                            placeholder=\"Надежный пароль\"\n                            data-testid=\"input-invitation-register-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-invitation-register-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                          </Button>\n                        </div>\n                        {invitationRegisterForm.formState.errors.password && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationRegisterForm.formState.errors.password.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Подтверждение пароля</Label>\n                        <div className=\"relative\">\n                          <Input \n                            {...invitationRegisterForm.register(\"confirmPassword\")}\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary pr-12\"\n                            placeholder=\"Повторите пароль\"\n                            data-testid=\"input-invitation-confirm-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-invitation-confirm-password\"\n                          >\n                            {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                          </Button>\n                        </div>\n                        {invitationRegisterForm.formState.errors.confirmPassword && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationRegisterForm.formState.errors.confirmPassword.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label className=\"block text-sm font-medium mb-2\">Код приглашения</Label>\n                        <Input \n                          {...invitationRegisterForm.register(\"invitationCode\")}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary text-center font-mono\"\n                          placeholder=\"XXXX-XXXX-XXXX\"\n                          data-testid=\"input-invitation-register-code\"\n                        />\n                        {invitationRegisterForm.formState.errors.invitationCode && (\n                          <p className=\"text-destructive text-sm mt-1\">\n                            {invitationRegisterForm.formState.errors.invitationCode.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full btn-primary py-4 rounded-xl font-medium transition-all duration-300\"\n                        disabled={invitationRegisterForm.formState.isSubmitting}\n                        data-testid=\"button-submit-invitation-register\"\n                      >\n                        {invitationRegisterForm.formState.isSubmitting ? \"Присоединение...\" : \"Присоединиться\"}\n                      </Button>\n                    </form>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-center text-xs text-muted-foreground\">\n        <p>\n          © 2025 — 2025 Endlessalbum · Сделано с любовью ·{\" \"}\n          <Button variant=\"link\" className=\"text-muted-foreground hover:text-foreground p-0 h-auto text-xs\" data-testid=\"link-privacy-footer\">\n            Политика конфиденциальности\n          </Button>\n          {\" \"}·{\" \"}\n          <Button variant=\"link\" className=\"text-muted-foreground hover:text-foreground p-0 h-auto text-xs\" data-testid=\"link-terms-footer\">\n            Условия использования\n          </Button>\n        </p>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":34801},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { ChatMessage } from \"@/components/chat-message\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Paperclip, Camera, Smile, Send, ArrowLeft, Lock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { ChatMessage as ChatMessageType } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport default function Chat() {\n  const { user } = useAuth();\n  const { socket, isConnected, sendMessage } = useWebSocket();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState<ChatMessageType[]>([]);\n  const [partnerOnline, setPartnerOnline] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: chatRoom } = useQuery({\n    queryKey: [\"/api/chat/room\"],\n    enabled: !!user,\n  });\n\n  const { data: initialMessages = [] } = useQuery({\n    queryKey: [\"/api/chat/messages\"],\n    enabled: !!user && !!chatRoom,\n  });\n\n  useEffect(() => {\n    if (initialMessages.length > 0) {\n      setMessages(initialMessages.reverse()); // API returns newest first, we want oldest first\n    }\n  }, [initialMessages]);\n\n  useEffect(() => {\n    if (socket) {\n      const handleMessage = (event: MessageEvent) => {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === \"new_message\") {\n          setMessages(prev => [...prev, data.message]);\n        }\n        \n        if (data.type === \"partner_status\") {\n          setPartnerOnline(data.isOnline);\n        }\n      };\n\n      socket.addEventListener(\"message\", handleMessage);\n      \n      return () => {\n        socket.removeEventListener(\"message\", handleMessage);\n      };\n    }\n  }, [socket]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!message.trim() || !isConnected) return;\n\n    // Check for animated words\n    const animatedWords = [\"люблю\", \"love\"];\n    const hasAnimatedWord = animatedWords.some(word => \n      message.toLowerCase().includes(word.toLowerCase())\n    );\n\n    sendMessage({\n      type: \"chat_message\",\n      content: message,\n      messageType: \"text\",\n      isEphemeral: false,\n    });\n\n    setMessage(\"\");\n  };\n\n  const handleFileUpload = () => {\n    // TODO: Implement file upload\n    console.log(\"File upload\");\n  };\n\n  const handleEphemeralPhoto = () => {\n    // TODO: Implement ephemeral photo capture\n    console.log(\"Ephemeral photo\");\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <main className=\"pt-16 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto h-[calc(100vh-4rem)]\">\n          <Card className=\"glass-strong h-full rounded-none border-0 flex flex-col\">\n            {/* Chat Header */}\n            <CardHeader className=\"p-4 border-b border-border flex-row items-center justify-between space-y-0\">\n              <div className=\"flex items-center gap-3\">\n                <Link href=\"/dashboard\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"p-2\" data-testid=\"button-back-dashboard\">\n                    <ArrowLeft className=\"w-4 h-4\" />\n                  </Button>\n                </Link>\n                \n                <div className=\"relative\">\n                  <Avatar className=\"w-10 h-10\">\n                    <AvatarFallback>P</AvatarFallback>\n                  </Avatar>\n                  {partnerOnline && (\n                    <div className=\"absolute -bottom-1 -right-1 w-4 h-4 online-indicator rounded-full border-2 border-background animate-pulse-soft\"></div>\n                  )}\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\" data-testid=\"text-partner-name\">Партнер</h3>\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-partner-status\">\n                    {partnerOnline ? \"в сети\" : \"не в сети\"}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Lock className=\"w-3 h-3\" />\n                <span>Зашифровано</span>\n              </div>\n            </CardHeader>\n\n            {/* Chat Messages */}\n            <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {messages.length === 0 ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl mb-4\">💬</div>\n                    <h3 className=\"text-lg font-semibold mb-2\">Начните разговор</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Отправьте первое сообщение, чтобы начать общение\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                messages.map((msg) => (\n                  <ChatMessage\n                    key={msg.id}\n                    message={msg}\n                    partnerAvatar=\"\"\n                    partnerUsername=\"Партнер\"\n                  />\n                ))\n              )}\n              <div ref={messagesEndRef} />\n            </CardContent>\n\n            {/* Chat Input */}\n            <div className=\"p-4 border-t border-border\">\n              {!isConnected && (\n                <div className=\"mb-3 p-2 bg-destructive/20 text-destructive text-sm rounded-lg text-center\">\n                  Соединение потеряно. Попытка переподключения...\n                </div>\n              )}\n              \n              <form onSubmit={handleSendMessage} className=\"flex items-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"p-2 glass-morphism rounded-lg hover:bg-accent/20 transition-colors\"\n                  onClick={handleFileUpload}\n                  data-testid=\"button-attach-file\"\n                >\n                  <Paperclip className=\"w-5 h-5\" />\n                </Button>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"p-2 glass-morphism rounded-lg hover:bg-accent/20 transition-colors\"\n                  onClick={handleEphemeralPhoto}\n                  data-testid=\"button-ephemeral-photo\"\n                >\n                  <Camera className=\"w-5 h-5\" />\n                </Button>\n                \n                <div className=\"flex-1 relative\">\n                  <Input\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    placeholder=\"Напишите сообщение...\"\n                    className=\"pr-10 glass-morphism border-0 focus:ring-2 focus:ring-primary outline-none transition-all\"\n                    disabled={!isConnected}\n                    data-testid=\"input-message\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 hover:bg-accent/20 rounded transition-colors\"\n                    data-testid=\"button-emoji\"\n                  >\n                    <Smile className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  disabled={!message.trim() || !isConnected}\n                  className=\"btn-primary p-3 rounded-xl transition-all duration-300 hover:scale-105\"\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"w-5 h-5\" />\n                </Button>\n              </form>\n              \n              <div className=\"mt-2 text-xs text-muted-foreground text-center\">\n                Нажмите Enter для отправки • Сообщения защищены сквозным шифрованием\n              </div>\n            </div>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8746},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { MemoryCard } from \"@/components/memory-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Grid, List, Plus, MessageCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { Memory, Counter } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { isConnected } = useWebSocket();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  const { data: memories = [], isLoading: memoriesLoading } = useQuery<Memory[]>({\n    queryKey: [\"/api/memories\"],\n    enabled: !!user,\n  });\n\n  const { data: counters = [] } = useQuery<Counter[]>({\n    queryKey: [\"/api/counters\"],\n    enabled: !!user,\n  });\n\n  const { data: chatRoom } = useQuery({\n    queryKey: [\"/api/chat/room\"],\n    enabled: !!user,\n  });\n\n  const createMemoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/memories\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/memories\"] });\n      toast({\n        title: \"Воспоминание создано\",\n        description: \"Ваше воспоминание успешно добавлено\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось создать воспоминание\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredMemories = memories.filter((memory: Memory) => {\n    if (activeFilter === \"all\") return true;\n    return memory.type === activeFilter;\n  });\n\n  const sortedMemories = [...filteredMemories].sort((a: Memory, b: Memory) => {\n    if (sortBy === \"newest\") {\n      return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();\n    }\n    return new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime();\n  });\n\n  const handleCreateMemory = () => {\n    // TODO: Open create memory modal\n    toast({\n      title: \"Функция в разработке\",\n      description: \"Создание воспоминаний будет доступно в следующем обновлении\",\n    });\n  };\n\n  const handleComment = (memoryId: string) => {\n    // TODO: Open comment modal or expand comments\n    console.log(\"Comment on memory:\", memoryId);\n  };\n\n  const handleLike = (memoryId: string) => {\n    // TODO: Implement like functionality\n    console.log(\"Like memory:\", memoryId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <Sidebar />\n      \n      <main className=\"ml-64 pt-16 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto p-6\">\n          {/* Welcome Header */}\n          <div className=\"glass-morphism p-6 rounded-3xl mb-8 animate-glass-morph\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold mb-2\">\n                  Добро пожаловать обратно, <span className=\"text-primary\">{user?.username}</span>! 👋\n                </h1>\n                <p className=\"text-muted-foreground\">Сегодня прекрасный день для создания новых воспоминаний</p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className={`w-2 h-2 rounded-full ${isConnected ? 'online-indicator' : 'bg-red-500'}`}></div>\n                <span className=\"text-sm text-muted-foreground\">\n                  {isConnected ? 'Подключено' : 'Отключено'}\n                </span>\n              </div>\n            </div>\n            \n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"stat-total-memories\">{memories.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Воспоминаний</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-month-memories\">\n                  {memories.filter((m: Memory) => {\n                    const monthAgo = new Date();\n                    monthAgo.setMonth(monthAgo.getMonth() - 1);\n                    return new Date(m.createdAt!) > monthAgo;\n                  }).length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">В этом месяце</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-secondary\" data-testid=\"stat-counters\">{counters.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Счетчиков</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Filters and Sort */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant={activeFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className={activeFilter === \"all\" ? \"tab-active\" : \"glass-morphism border-border\"}\n                  onClick={() => setActiveFilter(\"all\")}\n                  data-testid=\"filter-all\"\n                >\n                  Все\n                </Button>\n                <Button\n                  variant={activeFilter === \"photo\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className={activeFilter === \"photo\" ? \"tab-active\" : \"glass-morphism border-border\"}\n                  onClick={() => setActiveFilter(\"photo\")}\n                  data-testid=\"filter-photo\"\n                >\n                  Фото\n                </Button>\n                <Button\n                  variant={activeFilter === \"video\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className={activeFilter === \"video\" ? \"tab-active\" : \"glass-morphism border-border\"}\n                  onClick={() => setActiveFilter(\"video\")}\n                  data-testid=\"filter-video\"\n                >\n                  Видео\n                </Button>\n                <Button\n                  variant={activeFilter === \"quote\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className={activeFilter === \"quote\" ? \"tab-active\" : \"glass-morphism border-border\"}\n                  onClick={() => setActiveFilter(\"quote\")}\n                  data-testid=\"filter-quote\"\n                >\n                  Цитаты\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <select \n                className=\"glass-morphism px-3 py-2 rounded-lg text-sm border-0 outline-none focus:ring-2 focus:ring-primary bg-transparent\"\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value)}\n                data-testid=\"select-sort\"\n              >\n                <option value=\"newest\" className=\"bg-background\">Сначала новые</option>\n                <option value=\"oldest\" className=\"bg-background\">Сначала старые</option>\n              </select>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"p-2 glass-morphism border-border\"\n                onClick={() => setViewMode(viewMode === \"grid\" ? \"list\" : \"grid\")}\n                data-testid=\"button-view-toggle\"\n              >\n                {viewMode === \"grid\" ? <List className=\"w-4 h-4\" /> : <Grid className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Action - Recent Chat Message */}\n          {chatRoom && (\n            <Card className=\"glass-morphism border-border mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <div className=\"relative\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback>P</AvatarFallback>\n                    </Avatar>\n                    <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 online-indicator rounded-full border border-background\"></div>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">Последнее сообщение</p>\n                    <p className=\"text-xs text-muted-foreground\">Недавно</p>\n                  </div>\n                </div>\n                <div className=\"glass-strong p-3 rounded-lg mb-3\">\n                  <p className=\"text-sm\">Ждем новых сообщений...</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Link href=\"/chat\" className=\"flex-1\">\n                    <Button className=\"w-full btn-primary py-2 rounded-lg text-sm font-medium transition-all duration-300\" data-testid=\"button-open-chat\">\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      Открыть чат\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Memories Grid/List */}\n          {memoriesLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : sortedMemories.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"glass-morphism p-8 rounded-3xl\">\n                <div className=\"text-4xl mb-4\">📸</div>\n                <h3 className=\"text-xl font-semibold mb-2\">Пока нет воспоминаний</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Создайте первое воспоминание и начните собирать моменты вашей истории\n                </p>\n                <Button \n                  onClick={handleCreateMemory}\n                  className=\"btn-primary\"\n                  data-testid=\"button-create-first-memory\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Создать воспоминание\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className={viewMode === \"grid\" ? \"memory-grid\" : \"space-y-6\"}>\n              {sortedMemories.map((memory: Memory) => (\n                <MemoryCard\n                  key={memory.id}\n                  memory={memory}\n                  onComment={handleComment}\n                  onLike={handleLike}\n                />\n              ))}\n            </div>\n          )}\n\n          {/* Load More Button */}\n          {sortedMemories.length > 0 && (\n            <div className=\"text-center mt-8\">\n              <Button \n                variant=\"outline\"\n                className=\"glass-morphism px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:scale-105 border-border\"\n                data-testid=\"button-load-more\"\n              >\n                Загрузить еще воспоминания\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12287},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, Trash2, Edit, Gift, User, Heart } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Wishlist } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [profileData, setProfileData] = useState({\n    username: user?.username || \"\",\n    status: user?.status || \"\",\n  });\n\n  const { data: wishlist = [], isLoading: wishlistLoading } = useQuery<Wishlist[]>({\n    queryKey: [\"/api/wishlist\"],\n    enabled: !!user,\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", `/api/users/${user?.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Профиль обновлен\",\n        description: \"Изменения успешно сохранены\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить профиль\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addWishlistItemMutation = useMutation({\n    mutationFn: async (data: Partial<Wishlist>) => {\n      const response = await apiRequest(\"POST\", \"/api/wishlist\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Подарок добавлен\",\n        description: \"Новый элемент добавлен в список желаний\",\n      });\n    },\n  });\n\n  const deleteWishlistItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/wishlist/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Подарок удален\",\n        description: \"Элемент удален из списка желаний\",\n      });\n    },\n  });\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handleAddWishlistItem = () => {\n    const name = prompt(\"Название подарка:\");\n    if (!name) return;\n\n    const description = prompt(\"Описание (необязательно):\") || \"\";\n    const link = prompt(\"Ссылка (необязательно):\") || \"\";\n\n    addWishlistItemMutation.mutate({\n      name,\n      description,\n      link: link || undefined,\n      priority: 0,\n    });\n  };\n\n  const handleDeleteWishlistItem = (id: string) => {\n    if (confirm(\"Удалить этот элемент из списка желаний?\")) {\n      deleteWishlistItemMutation.mutate(id);\n    }\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <main className=\"pt-16 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto p-6\">\n          {/* Profile Header */}\n          <Card className=\"glass-morphism border-border mb-8\">\n            <CardHeader>\n              <div className=\"flex items-center gap-6\">\n                <Avatar className=\"w-24 h-24\">\n                  <AvatarImage src={user.avatar || undefined} alt={user.username} />\n                  <AvatarFallback className=\"text-2xl\">\n                    {user.username?.charAt(0).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-4 mb-2\">\n                    <h1 className=\"text-3xl font-bold\" data-testid=\"text-profile-username\">\n                      {user.username}\n                    </h1>\n                    <Badge \n                      variant={user.role === \"main_admin\" ? \"default\" : \"secondary\"}\n                      className={user.role === \"main_admin\" ? \"tab-active\" : \"\"}\n                      data-testid=\"badge-user-role\"\n                    >\n                      {user.role === \"main_admin\" ? \"Главный администратор\" : \n                       user.role === \"co_admin\" ? \"Администратор\" : \"Гость\"}\n                    </Badge>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-4\" data-testid=\"text-user-email\">\n                    {user.email}\n                  </p>\n                  \n                  {user.status && (\n                    <p className=\"text-sm bg-primary/20 text-primary px-3 py-1 rounded-full inline-block\" data-testid=\"text-user-status\">\n                      {user.status}\n                    </p>\n                  )}\n                </div>\n                \n                <Button\n                  onClick={() => setIsEditing(!isEditing)}\n                  variant=\"outline\"\n                  className=\"glass-morphism border-border\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  {isEditing ? \"Отмена\" : \"Редактировать\"}\n                </Button>\n              </div>\n            </CardHeader>\n          </Card>\n\n          <Tabs defaultValue=\"settings\" className=\"w-full\">\n            <TabsList className=\"glass-strong p-1 rounded-xl mb-6 w-full\">\n              <TabsTrigger \n                value=\"settings\" \n                className=\"flex-1 data-[state=active]:tab-active\"\n                data-testid=\"tab-settings\"\n              >\n                <User className=\"w-4 h-4 mr-2\" />\n                Настройки профиля\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"wishlist\"\n                className=\"flex-1 data-[state=active]:tab-active\"\n                data-testid=\"tab-wishlist\"\n              >\n                <Gift className=\"w-4 h-4 mr-2\" />\n                Список желаний\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Profile Settings */}\n            <TabsContent value=\"settings\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader>\n                  <CardTitle>Настройки профиля</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {isEditing ? (\n                    <>\n                      <div>\n                        <Label htmlFor=\"username\" className=\"text-sm font-medium\">\n                          Никнейм\n                        </Label>\n                        <Input\n                          id=\"username\"\n                          value={profileData.username}\n                          onChange={(e) => setProfileData({ ...profileData, username: e.target.value })}\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary mt-2\"\n                          data-testid=\"input-edit-username\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"status\" className=\"text-sm font-medium\">\n                          Статус\n                        </Label>\n                        <Input\n                          id=\"status\"\n                          value={profileData.status}\n                          onChange={(e) => setProfileData({ ...profileData, status: e.target.value })}\n                          placeholder=\"Ваш статус...\"\n                          className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary mt-2\"\n                          data-testid=\"input-edit-status\"\n                        />\n                      </div>\n\n                      <div className=\"flex gap-4\">\n                        <Button\n                          onClick={handleSaveProfile}\n                          disabled={updateProfileMutation.isPending}\n                          className=\"btn-primary\"\n                          data-testid=\"button-save-profile\"\n                        >\n                          {updateProfileMutation.isPending ? \"Сохранение...\" : \"Сохранить\"}\n                        </Button>\n                        <Button\n                          onClick={() => setIsEditing(false)}\n                          variant=\"outline\"\n                          className=\"glass-morphism border-border\"\n                          data-testid=\"button-cancel-edit\"\n                        >\n                          Отмена\n                        </Button>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"text-sm font-medium text-muted-foreground\">Роль в аккаунте</h3>\n                        <p className=\"text-lg\">\n                          {user.role === \"main_admin\" ? \"Главный администратор\" : \n                           user.role === \"co_admin\" ? \"Администратор\" : \"Гость\"}\n                        </p>\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"text-sm font-medium text-muted-foreground\">Дата регистрации</h3>\n                        <p className=\"text-lg\">\n                          {user.createdAt ? new Date(user.createdAt).toLocaleDateString(\"ru-RU\") : \"Неизвестно\"}\n                        </p>\n                      </div>\n\n                      {user.lastSeen && (\n                        <div>\n                          <h3 className=\"text-sm font-medium text-muted-foreground\">Последняя активность</h3>\n                          <p className=\"text-lg\">\n                            {new Date(user.lastSeen).toLocaleString(\"ru-RU\")}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Wishlist */}\n            <TabsContent value=\"wishlist\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Heart className=\"w-5 h-5 text-red-400\" />\n                    Список желаний\n                  </CardTitle>\n                  <Button\n                    onClick={handleAddWishlistItem}\n                    className=\"btn-primary\"\n                    data-testid=\"button-add-wishlist-item\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Добавить подарок\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  {wishlistLoading ? (\n                    <div className=\"flex items-center justify-center py-8\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                    </div>\n                  ) : wishlist.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Gift className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">Список желаний пуст</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Добавьте подарки, которые вы хотели бы получить\n                      </p>\n                      <Button\n                        onClick={handleAddWishlistItem}\n                        className=\"btn-primary\"\n                        data-testid=\"button-add-first-wishlist-item\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Добавить первый подарок\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {wishlist.map((item: Wishlist) => (\n                        <div\n                          key={item.id}\n                          className=\"glass-strong p-4 rounded-xl flex items-start justify-between\"\n                          data-testid={`wishlist-item-${item.id}`}\n                        >\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold mb-1\" data-testid=\"text-wishlist-name\">\n                              {item.name}\n                            </h4>\n                            {item.description && (\n                              <p className=\"text-sm text-muted-foreground mb-2\" data-testid=\"text-wishlist-description\">\n                                {item.description}\n                              </p>\n                            )}\n                            {item.link && (\n                              <a\n                                href={item.link}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"text-sm text-primary hover:underline\"\n                                data-testid=\"link-wishlist-item\"\n                              >\n                                Посмотреть →\n                              </a>\n                            )}\n                          </div>\n                          <Button\n                            onClick={() => handleDeleteWishlistItem(item.id)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-destructive hover:text-destructive hover:bg-destructive/20\"\n                            data-testid=\"button-delete-wishlist-item\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15182},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Palette, \n  MessageCircle, \n  Bell, \n  Clock, \n  Gamepad2,\n  Key,\n  Copy,\n  RefreshCw,\n  UserPlus,\n  Crown\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newInvitationCode, setNewInvitationCode] = useState(\"\");\n\n  const { data: invitationCode, isLoading: codeLoading } = useQuery({\n    queryKey: [\"/api/account/invitation-code\"],\n    enabled: !!user && user.role === \"main_admin\",\n  });\n\n  const { data: accountUsers = [] } = useQuery({\n    queryKey: [\"/api/account/users\"],\n    enabled: !!user,\n  });\n\n  const generateCodeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/account/generate-invitation\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/account/invitation-code\"] });\n      setNewInvitationCode(data.code);\n      toast({\n        title: \"Новый код создан\",\n        description: \"Код приглашения успешно обновлен\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось создать новый код приглашения\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Скопировано\",\n      description: \"Код приглашения скопирован в буфер обмена\",\n    });\n  };\n\n  const currentCode = newInvitationCode || invitationCode?.code || \"\";\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <main className=\"pt-16 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">Настройки</h1>\n            <p className=\"text-muted-foreground\">\n              Управление аккаунтом, приглашениями и персонализацией\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"access\" className=\"w-full\">\n            <TabsList className=\"glass-strong p-1 rounded-xl mb-6 grid w-full grid-cols-3 lg:grid-cols-6\">\n              <TabsTrigger \n                value=\"access\" \n                className=\"data-[state=active]:tab-active\"\n                data-testid=\"tab-access\"\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">Доступ</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"appearance\"\n                className=\"data-[state=active]:tab-active\"\n                data-testid=\"tab-appearance\"\n              >\n                <Palette className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">Оформление</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"messages\"\n                className=\"data-[state=active]:tab-active\"\n                data-testid=\"tab-messages\"\n              >\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">Сообщения</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"notifications\"\n                className=\"data-[state=active]:tab-active\"\n                data-testid=\"tab-notifications\"\n              >\n                <Bell className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">Уведомления</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"events\"\n                className=\"data-[state=active]:tab-active\"\n                data-testid=\"tab-events\"\n              >\n                <Clock className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">События</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"games\"\n                className=\"data-[state=active]:tab-active\"\n                data-testid=\"tab-games\"\n              >\n                <Gamepad2 className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">Игры</span>\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Access Management */}\n            <TabsContent value=\"access\">\n              <div className=\"space-y-6\">\n                {user.role === \"main_admin\" && (\n                  <Card className=\"glass-morphism border-border\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Key className=\"w-5 h-5\" />\n                        Код приглашения\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium\">Текущий код приглашения</Label>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Input\n                            value={currentCode}\n                            readOnly\n                            className=\"glass-morphism border-0 font-mono text-center\"\n                            data-testid=\"input-invitation-code\"\n                          />\n                          <Button\n                            onClick={() => copyToClipboard(currentCode)}\n                            variant=\"outline\"\n                            className=\"glass-morphism border-border\"\n                            data-testid=\"button-copy-code\"\n                          >\n                            <Copy className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            onClick={() => generateCodeMutation.mutate()}\n                            disabled={generateCodeMutation.isPending}\n                            variant=\"outline\"\n                            className=\"glass-morphism border-border\"\n                            data-testid=\"button-generate-code\"\n                          >\n                            <RefreshCw className={`w-4 h-4 ${generateCodeMutation.isPending ? \"animate-spin\" : \"\"}`} />\n                          </Button>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Поделитесь этим кодом с партнером для присоединения к аккаунту\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <Card className=\"glass-morphism border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <UserPlus className=\"w-5 h-5\" />\n                      Участники аккаунта\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {accountUsers.map((accountUser: any) => (\n                        <div\n                          key={accountUser.id}\n                          className=\"flex items-center justify-between p-4 glass-strong rounded-xl\"\n                          data-testid={`user-${accountUser.id}`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                              {accountUser.username?.charAt(0).toUpperCase()}\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid=\"text-user-username\">\n                                {accountUser.username}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-user-email\">\n                                {accountUser.email}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge \n                              variant={accountUser.role === \"main_admin\" ? \"default\" : \"secondary\"}\n                              className={accountUser.role === \"main_admin\" ? \"tab-active\" : \"\"}\n                              data-testid=\"badge-user-role\"\n                            >\n                              {accountUser.role === \"main_admin\" && <Crown className=\"w-3 h-3 mr-1\" />}\n                              {accountUser.role === \"main_admin\" ? \"Главный админ\" : \n                               accountUser.role === \"co_admin\" ? \"Администратор\" : \"Гость\"}\n                            </Badge>\n                            {accountUser.isOnline && (\n                              <div className=\"w-2 h-2 online-indicator rounded-full\" data-testid=\"indicator-online\"></div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Appearance */}\n            <TabsContent value=\"appearance\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader>\n                  <CardTitle>Настройки оформления</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Тема интерфейса</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Переключение между светлой и темной темой\n                      </p>\n                    </div>\n                    <Switch\n                      checked={theme === \"light\"}\n                      onCheckedChange={toggleTheme}\n                      data-testid=\"switch-theme\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Шрифт интерфейса</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Выберите предпочитаемый шрифт для интерфейса\n                    </p>\n                    <select \n                      className=\"glass-morphism px-3 py-2 rounded-lg border-0 outline-none focus:ring-2 focus:ring-primary bg-transparent w-full\"\n                      defaultValue=\"Inter\"\n                      data-testid=\"select-font\"\n                    >\n                      <option value=\"Inter\" className=\"bg-background\">Inter (по умолчанию)</option>\n                      <option value=\"Roboto\" className=\"bg-background\">Roboto</option>\n                      <option value=\"Open Sans\" className=\"bg-background\">Open Sans</option>\n                      <option value=\"Montserrat\" className=\"bg-background\">Montserrat</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Анимации переходов</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Включить плавные анимации при переходах между страницами\n                    </p>\n                    <Switch defaultChecked data-testid=\"switch-animations\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Messages */}\n            <TabsContent value=\"messages\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader>\n                  <CardTitle>Настройки сообщений</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-base font-medium\">Анимации совпадающих слов</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Специальные эффекты для определенных слов в сообщениях\n                    </p>\n                    <Switch defaultChecked data-testid=\"switch-word-animations\" />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Стоп-слово</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Слово для временной блокировки чата (используйте с префиксом &)\n                    </p>\n                    <Input\n                      placeholder=\"Введите стоп-слово\"\n                      className=\"glass-morphism border-0 focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-stop-word\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Фон чата</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Настройка внешнего вида личного чата\n                    </p>\n                    <Button \n                      variant=\"outline\"\n                      className=\"glass-morphism border-border\"\n                      data-testid=\"button-change-chat-background\"\n                    >\n                      Изменить фон\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notifications */}\n            <TabsContent value=\"notifications\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader>\n                  <CardTitle>Уведомления</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Email уведомления</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Получать уведомления на электронную почту\n                      </p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"switch-email-notifications\" />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Push уведомления</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Мгновенные уведомления в браузере\n                      </p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"switch-push-notifications\" />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Напоминания о событиях</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Уведомления о важных датах и счетчиках\n                      </p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"switch-event-reminders\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Events */}\n            <TabsContent value=\"events\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader>\n                  <CardTitle>События и счетчики</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Отображение счетчиков</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Показывать счетчики важных дат на главной странице\n                      </p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"switch-show-counters\" />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Интеграция с календарем</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Подключение к календарю устройства для синхронизации событий\n                    </p>\n                    <Button \n                      variant=\"outline\"\n                      className=\"glass-morphism border-border\"\n                      data-testid=\"button-connect-calendar\"\n                    >\n                      Подключить календарь\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Games */}\n            <TabsContent value=\"games\">\n              <Card className=\"glass-morphism border-border\">\n                <CardHeader>\n                  <CardTitle>Настройки игр</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-base font-medium\">Вопросы для \"Правда или действие\"</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Добавьте свои вопросы и задания для игры\n                    </p>\n                    <Button \n                      variant=\"outline\"\n                      className=\"glass-morphism border-border\"\n                      data-testid=\"button-edit-truth-dare\"\n                    >\n                      Редактировать список\n                    </Button>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Настройки турниров</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Ведение счета и статистики по играм\n                    </p>\n                    <Switch defaultChecked data-testid=\"switch-game-statistics\" />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Уведомления об играх</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Получать приглашения к играм от партнера\n                    </p>\n                    <Switch defaultChecked data-testid=\"switch-game-notifications\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":20698},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nEndlessalbum is a couple-oriented memory sharing application built for creating and managing shared memories between partners. The application features a role-based system where one user creates an account as the main administrator and can invite a second user through an invitation code system. The platform combines social media elements with personal relationship tools, including memory feeds, private chat, counters/timers, wishlists, and comprehensive account management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React and TypeScript using a modern component-based architecture. The UI leverages Radix UI primitives with shadcn/ui components for consistent design patterns. The application uses Wouter for client-side routing and TanStack Query for state management and API communication. The design system implements a glassmorphism aesthetic with dark/light theme support and custom CSS variables for theming.\n\n## Backend Architecture\nThe backend uses Express.js with TypeScript in an ESM environment. The server implements RESTful APIs with WebSocket support for real-time features like chat. Authentication is handled through traditional sessions with Passport.js, supporting both local authentication and Google OAuth integration. The API follows RESTful conventions with proper error handling and request validation using Zod schemas.\n\n## Database Design\nThe application uses PostgreSQL with Drizzle ORM for type-safe database operations. The schema is centered around a multi-tenant architecture where accounts contain multiple users with different roles (main_admin, co_admin, guest). Key entities include users, accounts, memories, chat messages, counters, wishlists, and invitations. The database supports complex relationships for memory sharing permissions and role-based access control.\n\n## Authentication & Authorization\nThe system implements a dual-layer authentication approach: session-based authentication for the web application and role-based authorization within accounts. Users can authenticate via email/password or Google OAuth. The invitation system allows controlled account access through unique codes. Roles determine feature access levels, with main administrators having full control over invitations and permissions.\n\n## Real-time Features\nWebSocket integration provides real-time chat functionality with support for different message types including ephemeral content. The WebSocket connection manages user presence, message delivery, and live updates across the application. Connection management includes automatic reconnection logic for robust real-time experiences.\n\n## File Storage & Media\nThe application supports various content types for memories including photos, videos, and text-based content. Memory objects use flexible JSON storage for different content types while maintaining type safety through TypeScript interfaces.\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL database using the `@neondatabase/serverless` driver for connection pooling and edge compatibility\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL dialect for schema management and migrations\n\n## Authentication Services\n- **Google OAuth 2.0**: Social authentication integration using `passport-google-oauth20` strategy for seamless user onboarding\n- **Session Management**: Express sessions with PostgreSQL storage via `connect-pg-simple` for persistent authentication\n\n## Email Services\n- **MailerSend**: Transactional email service for user verification, password resets, and notification delivery\n\n## Development & Build Tools\n- **Vite**: Frontend build tool with React plugin for fast development and optimized production builds\n- **Replit Integration**: Development environment integration with runtime error overlay and cartographer plugins\n- **esbuild**: Backend bundling for Node.js deployment with ESM support\n\n## UI & Design Dependencies\n- **Radix UI**: Unstyled, accessible UI primitives for building the component system\n- **Tailwind CSS**: Utility-first CSS framework with custom design system configuration\n- **Lucide Icons**: Consistent icon library for UI elements and navigation\n\n## Real-time & State Management\n- **WebSocket (ws)**: Native WebSocket implementation for real-time chat and live features\n- **TanStack Query**: Server state management with caching, synchronization, and optimistic updates\n- **React Hook Form**: Form state management with Zod validation integration\n\n## Date & Utility Libraries\n- **date-fns**: Date manipulation and formatting with internationalization support (Russian locale)\n- **bcrypt**: Password hashing for secure authentication storage\n- **nanoid**: URL-safe unique ID generation for various entities","size_bytes":4858}},"version":1}